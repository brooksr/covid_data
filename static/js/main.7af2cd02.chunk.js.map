{"version":3,"sources":["states.js","Info.js","App.js","serviceWorker.js","index.js"],"names":["states","axios","require","Info","props","useState","info","setInfo","useEffect","get","then","response","data","catch","error","console","log","stateData","find","i","state","form","className","name","href","covid19Site","target","rel","covid19SiteSecondary","covid19SiteTertiary","source","notes","style","flex","twitter","sourceType","screenName","replace","options","height","App","setData","properties","setForm","sort","a","b","date","Object","keys","filter","prop","indexOf","filteredData","value","onChange","e","map","key","width","type","dataKey","stroke","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7af2cd02.chunk.js","sourcesContent":["const states = {\r\n    \"AL\": \"Alabama\",\r\n    \"AK\": \"Alaska\",\r\n    \"AS\": \"American Samoa\",\r\n    \"AZ\": \"Arizona\",\r\n    \"AR\": \"Arkansas\",\r\n    \"CA\": \"California\",\r\n    \"CO\": \"Colorado\",\r\n    \"CT\": \"Connecticut\",\r\n    \"DE\": \"Delaware\",\r\n    \"DC\": \"District Of Columbia\",\r\n    \"FM\": \"Federated States Of Micronesia\",\r\n    \"FL\": \"Florida\",\r\n    \"GA\": \"Georgia\",\r\n    \"GU\": \"Guam\",\r\n    \"HI\": \"Hawaii\",\r\n    \"ID\": \"Idaho\",\r\n    \"IL\": \"Illinois\",\r\n    \"IN\": \"Indiana\",\r\n    \"IA\": \"Iowa\",\r\n    \"KS\": \"Kansas\",\r\n    \"KY\": \"Kentucky\",\r\n    \"LA\": \"Louisiana\",\r\n    \"ME\": \"Maine\",\r\n    \"MH\": \"Marshall Islands\",\r\n    \"MD\": \"Maryland\",\r\n    \"MA\": \"Massachusetts\",\r\n    \"MI\": \"Michigan\",\r\n    \"MN\": \"Minnesota\",\r\n    \"MS\": \"Mississippi\",\r\n    \"MO\": \"Missouri\",\r\n    \"MT\": \"Montana\",\r\n    \"NE\": \"Nebraska\",\r\n    \"NV\": \"Nevada\",\r\n    \"NH\": \"New Hampshire\",\r\n    \"NJ\": \"New Jersey\",\r\n    \"NM\": \"New Mexico\",\r\n    \"NY\": \"New York\",\r\n    \"NC\": \"North Carolina\",\r\n    \"ND\": \"North Dakota\",\r\n    \"MP\": \"Northern Mariana Islands\",\r\n    \"OH\": \"Ohio\",\r\n    \"OK\": \"Oklahoma\",\r\n    \"OR\": \"Oregon\",\r\n    \"PW\": \"Palau\",\r\n    \"PA\": \"Pennsylvania\",\r\n    \"PR\": \"Puerto Rico\",\r\n    \"RI\": \"Rhode Island\",\r\n    \"SC\": \"South Carolina\",\r\n    \"SD\": \"South Dakota\",\r\n    \"TN\": \"Tennessee\",\r\n    \"TX\": \"Texas\",\r\n    \"UT\": \"Utah\",\r\n    \"VT\": \"Vermont\",\r\n    \"VI\": \"Virgin Islands\",\r\n    \"VA\": \"Virginia\",\r\n    \"WA\": \"Washington\",\r\n    \"WV\": \"West Virginia\",\r\n    \"WI\": \"Wisconsin\",\r\n    \"WY\": \"Wyoming\"\r\n};\r\nexport default states;","import React, {useState, useEffect} from 'react';\r\nimport { TwitterTimelineEmbed } from 'react-twitter-embed';\r\nimport ReactMarkdown from 'react-markdown'\r\nconst axios = require(\"axios\");\r\n\r\nexport const Info = props => {\r\n    let [info, setInfo] = useState([]);\r\n\r\n    useEffect(() => {\r\n        axios.get(`https://covidtracking.com/api/states/info`).then(function (response) {\r\n            setInfo(response.data); \r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n        })\r\n    }, []);\r\n\r\n    let stateData = info.find(i => i.state === props.form.state)\r\n    if (!stateData) return \"\";\r\n    return (\r\n        <div className=\"flex\">\r\n            <div>\r\n                <h2>{stateData.name}</h2>\r\n                <div className=\"buttons\">\r\n                    <a href={stateData.covid19Site} target=\"_blank\" rel=\"noopener noreferrer\">link1</a>\r\n                    <a href={stateData.covid19SiteSecondary} target=\"_blank\" rel=\"noopener noreferrer\">link2</a>\r\n                    <a href={stateData.covid19SiteTertiary} target=\"_blank\" rel=\"noopener noreferrer\">link3</a>\r\n                </div>\r\n                <ReactMarkdown source={stateData.notes} />\r\n            </div>\r\n            <div style={{flex: \"1 0 25%\"}}>\r\n                <p>{stateData.twitter}</p>\r\n                <TwitterTimelineEmbed\r\n                    sourceType=\"profile\"\r\n                    screenName={stateData.twitter.replace(\"@\", \"\")}\r\n                    options={{height: 400}}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState, useEffect} from 'react';\r\nimport './App.css';\r\nimport { AreaChart, ComposedChart, Area, Line, CartesianGrid, XAxis, YAxis, Tooltip } from 'recharts';\r\nimport states from './states'\r\nimport {Info} from './Info';\r\nconst axios = require(\"axios\");\r\n\r\nfunction App() {\r\n  let [data, setData] = useState([]);\r\n  let [form, setForm] = useState({\r\n    state: \"CA\",\r\n    // property: \"positive\",\r\n    properties: []\r\n  });\r\n\r\n  useEffect(() => {\r\n    axios.get(\"https://covidtracking.com/api/states/daily\").then(function (response) {\r\n      setData(response.data.sort((a, b) => a.date < b.date ? -1 : 1));\r\n      let properties = Object.keys(response.data[0]).filter(prop => {\r\n        return response.data[0][prop] !== null && [\"date\", \"state\"].indexOf(prop) === -1;\r\n      });\r\n      setForm({ ...form, properties: properties}); \r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    })\r\n  }, []);\r\n\r\n\r\n  let filteredData = !data ? [] : data.filter(i => i.state == form.state);\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>COVID 19 Data</h1>\r\n      <form>\r\n        <div>\r\n          <label>State</label>\r\n          <select value={form.state} onChange={e => setForm({ ...form, state:e.target.value})}>\r\n            {Object.keys(states).map(state => <option key={state} value={state}>{state}</option>)}\r\n          </select>\r\n        </div>\r\n        {/* <div>\r\n          <label>Property</label>\r\n          <select value={form.property} onChange={e => {\r\n            setForm({ ...form, property: e.target.value}); \r\n          }}>\r\n            {form.properties.map(prop => <option key={prop} value={prop}>{prop}</option>)}\r\n          </select>\r\n        </div> */}\r\n      </form>\r\n      <div>\r\n        <Info form={form} />\r\n      </div>\r\n      <div className=\"\">\r\n        <div className=\"graph\">\r\n          <h2>Totals</h2>\r\n          <ComposedChart width={600} height={600} data={filteredData}>\r\n            {/* <Line type=\"monotone\" dataKey={form.property} stroke=\"#8884d8\" /> */}\r\n            <Line type=\"monotone\" dataKey=\"negative\" stroke=\"green\" />\r\n            <Line type=\"monotone\" dataKey=\"positive\" stroke=\"red\" />\r\n            <Line type=\"monotone\" dataKey=\"pending\" stroke=\"gray\" />\r\n            <Line type=\"monotone\" dataKey=\"hospitalizedCurrently\" stroke=\"red\" />\r\n            <Line type=\"monotone\" dataKey=\"inIcuCurrently\" stroke=\"red\" />\r\n            <Line type=\"monotone\" dataKey=\"death\" stroke=\"black\" />\r\n            <Area type=\"monotone\" dataKey=\"totalTestResults\" stroke=\"gray\" />\r\n            <CartesianGrid stroke=\"#ccc\" />\r\n            <XAxis dataKey=\"date\" />\r\n            <YAxis dataKey=\"totalTestResults\" />\r\n            <Tooltip></Tooltip>\r\n          </ComposedChart>\r\n        </div>\r\n        <div className=\"graph\">\r\n          <h2>Increases</h2>\r\n          <AreaChart width={600} height={600} data={filteredData}>\r\n            <Area type=\"monotone\" dataKey=\"positiveIncrease\" stroke=\"gray\" />\r\n            <Area type=\"monotone\" dataKey=\"negativeIncrease\" stroke=\"gray\" />\r\n            <Area type=\"monotone\" dataKey=\"totalTestResultsIncrease\" stroke=\"gray\" />\r\n            <Area type=\"monotone\" dataKey=\"deathIncrease\" stroke=\"gray\" />\r\n            <CartesianGrid stroke=\"#ccc\" />\r\n            <XAxis dataKey=\"date\" />\r\n            <YAxis dataKey=\"totalTestResultsIncrease\" />\r\n            <Tooltip></Tooltip>\r\n          </AreaChart>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}