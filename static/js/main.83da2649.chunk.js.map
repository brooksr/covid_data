{"version":3,"sources":["states.js","App.js","serviceWorker.js","index.js"],"names":["states","axios","require","App","useState","data","setData","state","property","properties","form","setForm","useEffect","get","then","response","sort","a","b","date","Object","keys","catch","error","console","log","filteredData","filter","i","className","value","onChange","e","target","map","key","prop","width","height","type","dataKey","stroke","readOnly","JSON","stringify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.83da2649.chunk.js","sourcesContent":["const states = {\n    \"AL\": \"Alabama\",\n    \"AK\": \"Alaska\",\n    \"AS\": \"American Samoa\",\n    \"AZ\": \"Arizona\",\n    \"AR\": \"Arkansas\",\n    \"CA\": \"California\",\n    \"CO\": \"Colorado\",\n    \"CT\": \"Connecticut\",\n    \"DE\": \"Delaware\",\n    \"DC\": \"District Of Columbia\",\n    \"FM\": \"Federated States Of Micronesia\",\n    \"FL\": \"Florida\",\n    \"GA\": \"Georgia\",\n    \"GU\": \"Guam\",\n    \"HI\": \"Hawaii\",\n    \"ID\": \"Idaho\",\n    \"IL\": \"Illinois\",\n    \"IN\": \"Indiana\",\n    \"IA\": \"Iowa\",\n    \"KS\": \"Kansas\",\n    \"KY\": \"Kentucky\",\n    \"LA\": \"Louisiana\",\n    \"ME\": \"Maine\",\n    \"MH\": \"Marshall Islands\",\n    \"MD\": \"Maryland\",\n    \"MA\": \"Massachusetts\",\n    \"MI\": \"Michigan\",\n    \"MN\": \"Minnesota\",\n    \"MS\": \"Mississippi\",\n    \"MO\": \"Missouri\",\n    \"MT\": \"Montana\",\n    \"NE\": \"Nebraska\",\n    \"NV\": \"Nevada\",\n    \"NH\": \"New Hampshire\",\n    \"NJ\": \"New Jersey\",\n    \"NM\": \"New Mexico\",\n    \"NY\": \"New York\",\n    \"NC\": \"North Carolina\",\n    \"ND\": \"North Dakota\",\n    \"MP\": \"Northern Mariana Islands\",\n    \"OH\": \"Ohio\",\n    \"OK\": \"Oklahoma\",\n    \"OR\": \"Oregon\",\n    \"PW\": \"Palau\",\n    \"PA\": \"Pennsylvania\",\n    \"PR\": \"Puerto Rico\",\n    \"RI\": \"Rhode Island\",\n    \"SC\": \"South Carolina\",\n    \"SD\": \"South Dakota\",\n    \"TN\": \"Tennessee\",\n    \"TX\": \"Texas\",\n    \"UT\": \"Utah\",\n    \"VT\": \"Vermont\",\n    \"VI\": \"Virgin Islands\",\n    \"VA\": \"Virginia\",\n    \"WA\": \"Washington\",\n    \"WV\": \"West Virginia\",\n    \"WI\": \"Wisconsin\",\n    \"WY\": \"Wyoming\"\n};\nexport default states;","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip } from 'recharts';\nimport { findRenderedDOMComponentWithClass } from 'react-dom/test-utils';\nimport states from './states'\nconst axios = require(\"axios\");\n\nfunction App() {\n  let [data, setData] = useState([]);\n  let [form, setForm] = useState({\n    state: \"CA\",\n    property: \"positive\",\n    properties: []\n  });\n\n  useEffect(() => {\n    if (false && sessionStorage.getItem(\"cache\")) {\n      setData(JSON.parse(sessionStorage.getItem(\"cache\")));\n    } else {\n      axios.get(\"https://covidtracking.com/api/states/daily\").then(function (response) {\n        // handle success\n        //debugger;\n        // let filteredData = response.data.filter(i => i.state == \"AZ\" || i.state == \"CA\").reverse();\n        // setData(filteredData)\n        // sessionStorage.setItem(\"cache\", JSON.stringify(filteredData));\n        // console.log(filteredData);\n        setData(response.data.sort((a, b) => a.date < b.date ? -1 : 1));\n        let properties = Object.keys(response.data[0]);\n        setForm({ ...form, properties: properties}); \n      })\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n      })\n      .then(function () {\n        // always executed\n      });\n    }\n  }, [])\n\n\n  let filteredData = !data ? [] : data.filter(i => i.state == form.state);\n  return (\n    <div className=\"App\">\n      <h1>COVID 19 Data</h1>\n      <form>\n        <div>\n          <label>State</label>\n          <select value={form.state} onChange={e => {\n            setForm({ ...form, state:e.target.value}); \n          }}>\n            {Object.keys(states).map(state => <option key={state} value={state}>{state}</option>)}\n          </select>\n        </div>\n        <div>\n          <label>Property</label>\n          <select value={form.property} onChange={e => {\n            setForm({ ...form, property: e.target.value}); \n          }}>\n            {form.properties.map(prop => <option key={prop} value={prop}>{prop}</option>)}\n          </select>\n        </div>\n      </form>\n      <div className=\"flex\">\n        <div className=\"graph\">\n          <LineChart width={800} height={400} data={filteredData}>\n            <Line type=\"monotone\" dataKey={form.property} stroke=\"#8884d8\" />\n            <CartesianGrid stroke=\"#ccc\" />\n            <XAxis dataKey=\"date\" />\n            <YAxis dataKey={form.property} />\n            <Tooltip></Tooltip>\n          </LineChart>\n        </div>\n        <textarea readOnly value={JSON.stringify(data, null, \"\\t\")} className=\"raw-data hidden\" />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}